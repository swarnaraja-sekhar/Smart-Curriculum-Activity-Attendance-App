import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import timetableData from '../../data/timetable.json';
import { 
  BookOpenIcon, 
  SparklesIcon, 
  FlagIcon, 
  AcademicCapIcon,
  ClockIcon,
  CalendarIcon,
  BellIcon,
  UserCircleIcon,
  ChevronRightIcon,
  LocationMarkerIcon,
  CheckCircleIcon,
  ExclamationIcon,
  LightningBoltIcon
} from '@heroicons/react/24/outline';
import { StarIcon } from '@heroicons/react/24/solid';
import DailyRoutine from '../../components/student/DailyRoutine';

// --- TASK DATABASE ---
const taskDatabase = [
  // GATE Preparation Tasks
  { title: "Solve GATE Previous Year Questions (DS)", goal: "GATE", interest: "Algorithms", priority: "high", duration: 60 },
  { title: "Practice Aptitude & Reasoning", goal: "GATE", interest: "Competitive Programming", priority: "medium", duration: 45 },
  { title: "Review Operating Systems Concepts", goal: "GATE", interest: "OS", priority: "high", duration: 60 },
  { title: "Solve Computer Networks Problems", goal: "GATE", interest: "Networking", priority: "medium", duration: 45 },
  { title: "Practice DBMS Queries", goal: "GATE", interest: "Databases", priority: "high", duration: 30 },
  
  // Placement Preparation Tasks
  { title: "Build a React Component Library", goal: "Placement", interest: "Web Development", priority: "high", duration: 60 },
  { title: "Design a Landing Page in Figma", goal: "Placement", interest: "UI/UX Design", priority: "medium", duration: 45 },
  { title: "Practice Coding Interview Questions", goal: "Placement", interest: "Programming", priority: "high", duration: 60 },
  { title: "Mock Interview Practice", goal: "Placement", interest: "Soft Skills", priority: "high", duration: 30 },
  { title: "Update Portfolio Website", goal: "Placement", interest: "Web Development", priority: "medium", duration: 90 },
  
  // Self-Development Tasks
  { title: "Read about latest JS Frameworks", goal: "Learning", interest: "Web Development", priority: "low", duration: 30 },
  { title: "Practice Data Structures", goal: "Learning", interest: "Programming", priority: "medium", duration: 45 },
  { title: "Work on Personal Project", goal: "Learning", interest: "Development", priority: "medium", duration: 60 },
  { title: "Watch Technical Tutorials", goal: "Learning", interest: "Technology", priority: "low", duration: 30 },
  
  // General Tasks
  { title: "Review Class Notes", goal: null, interest: null, priority: "medium", duration: 30 },
  { title: "Complete Assignments", goal: null, interest: null, priority: "high", duration: 60 },
  { title: "Prepare for Tomorrow's Classes", goal: null, interest: null, priority: "medium", duration: 45 }
];

const dayNames = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
const today = new Date();
const todayName = dayNames[today.getDay() === 0 ? 6 : today.getDay() - 1]; // Adjusting to have Monday as first day

// --- THE RECOMMENDATION ENGINE LOGIC ---
const generateRoutineForStudent = (student) => {
  if (!student) return [];

  const schedule = student.schedule || [];
  const currentHour = new Date().getHours();
  
  // Track suggested tasks to avoid duplicates
  const suggestedTaskIds = new Set();
  
  return schedule.map((period, index) => {
    if (period.type === 'free') {
      let suggestedTask = null;
      const [startHour] = period.time.split(':').map(Number);
      const timeOfDay = startHour < 12 ? 'morning' : startHour < 17 ? 'afternoon' : 'evening';
      
      // Calculate available time from period duration
      const [start, end] = period.time.split(' - ').map(time => {
        const [hours, minutes] = time.replace(/[AP]M/, '').split(':').map(Number);
        return hours + (minutes / 60);
      });
      const availableTime = Math.round((end - start) * 60); // Convert to minutes

      // Filter tasks by available time
      const possibleTasks = taskDatabase.filter(task => 
        task.duration <= availableTime && !suggestedTaskIds.has(task.title)
      );

      // Priority scoring system
      const scoreTask = (task) => {
        let score = 0;
        
        // Goal alignment
        if (student.longTermGoal && task.goal === student.longTermGoal) score += 5;
        
        // Interest alignment
        if (student.interests?.includes(task.interest)) score += 3;
        
        // Priority level
        if (task.priority === 'high') score += 4;
        else if (task.priority === 'medium') score += 2;
        
        // Time of day optimization
        if (timeOfDay === 'morning' && task.priority === 'high') score += 2;
        if (timeOfDay === 'afternoon' && task.duration <= 45) score += 1;
        
        // Previous class context
        if (index > 0 && schedule[index - 1].type === 'class') {
          const prevClass = schedule[index - 1].title;
          if (task.interest?.toLowerCase().includes(prevClass.toLowerCase())) score += 3;
        }
        
        return score;
      };

      // Sort tasks by score and get the best match
      const scoredTasks = possibleTasks
        .map(task => ({ ...task, score: scoreTask(task) }))
        .sort((a, b) => b.score - a.score);

      suggestedTask = scoredTasks[0];
      
      if (suggestedTask) {
        suggestedTaskIds.add(suggestedTask.title);
      } else {
        // Fallback to generic tasks if no suitable task found
        suggestedTask = taskDatabase.find(task => 
          task.goal === null && 
          task.interest === null && 
          task.duration <= availableTime
        );
      }
      
      return { 
        ...period, 
        suggestedTask,
        timeOfDay,
        availableTime 
      };
    }
    return period;
  });
};

// Format time for visual display (e.g., "10:00 AM - 11:30 AM" -> "10:00 - 11:30")
const formatTimeDisplay = (timeString) => {
  return timeString
    .replace(/(\d+:\d+) ([AP]M) - (\d+:\d+) ([AP]M)/, (_, start, ampm1, end, ampm2) => {
      // If AM/PM are the same, only show it once at the end
      if (ampm1 === ampm2) return `${start} - ${end} ${ampm1}`;
      return `${start} ${ampm1} - ${end} ${ampm2}`;
    });
};

const TimeSlot = ({ time, type, isActive }) => {
  return (
    <div className={`text-xs font-medium px-2 py-1 rounded-md ${
      isActive 
        ? 'bg-blue-100 text-blue-800' 
        : type === 'free'
          ? 'bg-emerald-50 text-emerald-700'
          : 'bg-gray-100 text-gray-700'
    }`}>
      <div className="flex items-center">
        <ClockIcon className="w-3 h-3 mr-1" />
        <span>{formatTimeDisplay(time)}</span>
      </div>
    </div>
  );
};

export default function StudentTimetablePage() {
  const { user } = useAuth();
  const [selectedDay, setSelectedDay] = useState(todayName);
  const [activeView, setActiveView] = useState('weekly'); // 'weekly' or 'daily'
  const [loading, setLoading] = useState(true);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [showPriorityInfo, setShowPriorityInfo] = useState(false);
  
  // Generate the personalized routine for the logged-in user based on selected day
  const personalizedRoutine = generateRoutineForStudent({
    ...user,
    schedule: timetableData[selectedDay] || []
  });

  // Find currently active period
  const getCurrentPeriod = () => {
    if (!personalizedRoutine.length) return null;

    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const currentTimeValue = hours + minutes / 60;

    return personalizedRoutine.find(period => {
      const [start, end] = period.time.split(' - ').map(time => {
        const isPM = time.includes('PM');
        let [h, m] = time.replace(/[AP]M/, '').split(':').map(Number);
        if (isPM && h !== 12) h += 12;
        if (!isPM && h === 12) h = 0;
        return h + m / 60;
      });
      
      return currentTimeValue >= start && currentTimeValue < end;
    });
  };

  const currentPeriod = getCurrentPeriod();

  // Simulated loading effect
  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 600);
    
    return () => clearTimeout(timer);
  }, []);

  // Update current time every minute
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);
    
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50">
        <div className="w-16 h-16 border-t-4 border-blue-600 border-solid rounded-full animate-spin"></div>
        <p className="mt-4 text-lg text-gray-700">Loading your timetable...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6">
        {/* Header Banner */}
        <div className="mb-8 relative overflow-hidden bg-gradient-to-r from-blue-600 to-indigo-600 rounded-2xl p-6 sm:p-8 shadow-lg">
          <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
          <div className="absolute right-0 bottom-0 -mb-8 -mr-8 w-40 h-40 bg-white/10 rounded-full blur-2xl"></div>
          
          <div className="relative z-10 flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
              <div className="flex items-center text-blue-100 mb-1 font-medium">
                <CalendarIcon className="w-5 h-5 mr-2" />
                <span>{currentTime.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}</span>
              </div>
              <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
                Your Timetable
              </h1>
              <p className="text-blue-100 max-w-lg hidden sm:block">
                View your class schedule and personalized study recommendations tailored to your goals and interests.
              </p>
            </div>
            
            {currentPeriod && (
              <div className="mt-4 sm:mt-0 bg-white/20 backdrop-blur-md px-4 py-3 rounded-xl text-white">
                <p className="text-sm font-medium text-blue-100">Currently:</p>
                <p className="font-bold text-xl">
                  {currentPeriod.type === 'class' 
                    ? currentPeriod.title 
                    : currentPeriod.suggestedTask 
                      ? 'Free Period - Suggested Task' 
                      : 'Free Period'
                  }
                </p>
                <div className="flex items-center mt-1">
                  <ClockIcon className="w-4 h-4 mr-1 text-blue-200" />
                  <span className="text-sm">{currentPeriod.time}</span>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Day Selector Pills */}
        <div className="flex overflow-x-auto hide-scrollbar space-x-2 pb-4 mb-6">
          {dayNames.map((day) => (
            <button
              key={day}
              onClick={() => setSelectedDay(day)}
              className={`px-5 py-2.5 rounded-xl text-sm font-medium transition-all whitespace-nowrap
                ${selectedDay === day 
                  ? 'bg-blue-600 text-white shadow-md' 
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'}
                ${day === todayName ? 'ring-2 ring-blue-300' : ''}
              `}
            >
              {day}
              {day === todayName && (
                <span className="ml-1 bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded-full">
                  Today
                </span>
              )}
            </button>
          ))}
        </div>

        {/* View Toggle Tabs */}
        <div className="bg-white rounded-xl shadow-sm mb-6 p-1.5 inline-flex">
          <button
            onClick={() => setActiveView('weekly')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
              activeView === 'weekly'
                ? 'bg-blue-600 text-white shadow-sm'
                : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Schedule View
          </button>
          <button
            onClick={() => setActiveView('daily')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
              activeView === 'daily'
                ? 'bg-blue-600 text-white shadow-sm'
                : 'bg-white text-gray-700 hover:bg-gray-100'
            }`}
          >
            Daily Routine
          </button>
        </div>

        {activeView === 'weekly' ? (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Timeline */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold text-gray-800 flex items-center">
                    <AcademicCapIcon className="w-6 h-6 mr-2 text-blue-600" />
                    {selectedDay}'s Schedule
                  </h2>
                  <div className="text-sm bg-blue-50 text-blue-700 py-1 px-3 rounded-lg flex items-center">
                    <BellIcon className="w-4 h-4 mr-1" />
                    {personalizedRoutine.filter(p => p.type === 'class').length} Classes
                  </div>
                </div>

                {personalizedRoutine.length > 0 ? (
                  <div className="relative">
                    {/* Timeline line */}
                    <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200 z-0"></div>
                    
                    <div className="space-y-6 relative z-10">
                      {personalizedRoutine.map((item, index) => {
                        const isCurrentPeriod = currentPeriod && 
                          currentPeriod.time === item.time && 
                          selectedDay === todayName;
                          
                        return (
                          <div key={index} className={`relative pl-10 transition-all ${
                            isCurrentPeriod ? 'transform scale-102 -translate-x-1' : ''
                          }`}>
                            {/* Timeline dot */}
                            <div className={`absolute left-2.5 top-4 w-3 h-3 rounded-full z-20 border-2 ${
                              isCurrentPeriod 
                                ? 'bg-blue-600 border-blue-100 animate-pulse'
                                : item.type === 'free'
                                  ? 'bg-emerald-500 border-emerald-100' 
                                  : 'bg-indigo-500 border-indigo-100'
                            }`}></div>
                            
                            {/* Card */}
                            <div className={`bg-white rounded-xl transition-all ${
                              isCurrentPeriod 
                                ? 'shadow-lg ring-2 ring-blue-200'
                                : 'shadow-sm hover:shadow-md border border-gray-100'
                            }`}>
                              {/* Card Header */}
                              <div className={`px-4 py-3 rounded-t-xl flex items-center justify-between ${
                                item.type === 'free' 
                                  ? 'bg-emerald-50 border-b border-emerald-100' 
                                  : 'bg-indigo-50 border-b border-indigo-100'
                              }`}>
                                <TimeSlot 
                                  time={item.time} 
                                  type={item.type} 
                                  isActive={isCurrentPeriod} 
                                />
                                
                                {item.type === 'class' && (
                                  <div className="bg-indigo-100 text-indigo-800 text-xs font-medium py-1 px-2 rounded">
                                    Class
                                  </div>
                                )}
                                
                                {item.type === 'free' && (
                                  <div className="bg-emerald-100 text-emerald-800 text-xs font-medium py-1 px-2 rounded">
                                    Free Period
                                  </div>
                                )}
                              </div>
                              
                              {/* Card Body */}
                              <div className="p-4">
                                {item.type === 'class' && (
                                  <div className="flex items-start">
                                    <div className="bg-indigo-100 p-2.5 rounded-lg">
                                      <BookOpenIcon className="w-6 h-6 text-indigo-700" />
                                    </div>
                                    <div className="ml-3">
                                      <h3 className="text-lg font-bold text-gray-900">{item.title}</h3>
                                      <div className="flex flex-wrap gap-2 mt-2">
                                        {item.professor && (
                                          <div className="flex items-center text-sm text-gray-600">
                                            <UserCircleIcon className="w-4 h-4 mr-1 text-gray-500" />
                                            <span>{item.professor}</span>
                                          </div>
                                        )}
                                        {item.location && (
                                          <div className="flex items-center text-sm text-gray-600">
                                            <LocationMarkerIcon className="w-4 h-4 mr-1 text-gray-500" />
                                            <span>{item.location}</span>
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                )}

                                {item.type === 'free' && item.suggestedTask && (
                                  <div>
                                    <div className="flex items-start">
                                      <div className={`p-2.5 rounded-lg ${
                                        item.suggestedTask.priority === 'high'
                                          ? 'bg-red-100' 
                                          : item.suggestedTask.priority === 'medium'
                                            ? 'bg-orange-100'
                                            : 'bg-blue-100'
                                      }`}>
                                        {item.suggestedTask.priority === 'high' ? (
                                          <LightningBoltIcon className="w-6 h-6 text-red-700" />
                                        ) : item.suggestedTask.priority === 'medium' ? (
                                          <FlagIcon className="w-6 h-6 text-orange-700" />
                                        ) : (
                                          <SparklesIcon className="w-6 h-6 text-blue-700" />
                                        )}
                                      </div>
                                      <div className="ml-3 flex-1">
                                        <div className="flex justify-between items-start">
                                          <h3 className="text-lg font-bold text-gray-900">{item.suggestedTask.title}</h3>
                                          <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                                            item.suggestedTask.priority === 'high' 
                                              ? 'bg-red-100 text-red-800'
                                              : item.suggestedTask.priority === 'medium'
                                                ? 'bg-orange-100 text-orange-800'
                                                : 'bg-blue-100 text-blue-800'
                                          }`}>
                                            {item.suggestedTask.priority?.toUpperCase() || 'OPTIONAL'}
                                          </span>
                                        </div>
                                        <div className="flex flex-wrap gap-2 mt-2">
                                          {item.suggestedTask.goal && (
                                            <span className="bg-blue-50 text-blue-700 text-xs px-2 py-1 rounded flex items-center">
                                              <AcademicCapIcon className="w-3 h-3 mr-1" />
                                              {item.suggestedTask.goal}
                                            </span>
                                          )}
                                          {item.suggestedTask.interest && (
                                            <span className="bg-green-50 text-green-700 text-xs px-2 py-1 rounded flex items-center">
                                              <StarIcon className="w-3 h-3 mr-1" />
                                              {item.suggestedTask.interest}
                                            </span>
                                          )}
                                          <span className="bg-purple-50 text-purple-700 text-xs px-2 py-1 rounded flex items-center">
                                            <ClockIcon className="w-3 h-3 mr-1" />
                                            {item.suggestedTask.duration} mins
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                    <div className="mt-3 flex justify-between items-center">
                                      <p className="text-xs text-gray-500">
                                        <span className="text-gray-700 font-medium">
                                          Best time: 
                                        </span> {item.timeOfDay}
                                      </p>
                                      <button className="text-sm text-blue-600 font-medium hover:text-blue-800 flex items-center">
                                        <span>Start Task</span>
                                        <ChevronRightIcon className="w-4 h-4 ml-1" />
                                      </button>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-10">
                    <div className="mx-auto bg-gray-100 rounded-full w-16 h-16 flex items-center justify-center mb-4">
                      <CalendarIcon className="w-8 h-8 text-gray-500" />
                    </div>
                    <p className="text-gray-600">No schedule available for {selectedDay}</p>
                  </div>
                )}
              </div>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Stats Card */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4">Weekly Overview</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Total Classes</span>
                    <span className="font-bold text-gray-900">
                      {Object.values(timetableData).reduce((total, day) => 
                        total + day.filter(period => period.type === 'class').length, 0
                      )}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Free Periods</span>
                    <span className="font-bold text-gray-900">
                      {Object.values(timetableData).reduce((total, day) => 
                        total + day.filter(period => period.type === 'free').length, 0
                      )}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Study Time Available</span>
                    <span className="font-bold text-gray-900">
                      {Object.values(timetableData).reduce((total, day) => {
                        return total + day
                          .filter(period => period.type === 'free')
                          .reduce((time, period) => {
                            const [start, end] = period.time.split(' - ').map(time => {
                              const [hours, minutes] = time.replace(/[AP]M/, '').split(':').map(Number);
                              return hours + (minutes / 60);
                            });
                            return time + (end - start);
                          }, 0);
                      }, 0).toFixed(1)}h
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Busiest Day</span>
                    <span className="font-bold text-gray-900">
                      {Object.entries(timetableData).sort((a, b) => 
                        b[1].filter(p => p.type === 'class').length - 
                        a[1].filter(p => p.type === 'class').length
                      )[0][0]}
                    </span>
                  </div>
                </div>
              </div>
              
              {/* Priority Legend */}
              <div className="bg-white rounded-xl shadow-sm overflow-hidden">
                <div className="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">
                  <h3 className="text-lg font-bold text-white flex items-center justify-between">
                    <span>Priority Legend</span>
                    <button 
                      onClick={() => setShowPriorityInfo(!showPriorityInfo)}
                      className="text-sm bg-white/20 hover:bg-white/30 text-white rounded-lg px-2 py-1 transition-colors"
                    >
                      {showPriorityInfo ? 'Hide' : 'Info'}
                    </button>
                  </h3>
                </div>
                <div className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-center">
                      <div className="bg-red-100 p-2 rounded-lg">
                        <LightningBoltIcon className="w-5 h-5 text-red-700" />
                      </div>
                      <div className="ml-3">
                        <p className="font-medium text-gray-900">High Priority</p>
                        {showPriorityInfo && (
                          <p className="text-xs text-gray-600 mt-1">
                            Tasks that need immediate attention and are crucial for your goals
                          </p>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center">
                      <div className="bg-orange-100 p-2 rounded-lg">
                        <FlagIcon className="w-5 h-5 text-orange-700" />
                      </div>
                      <div className="ml-3">
                        <p className="font-medium text-gray-900">Medium Priority</p>
                        {showPriorityInfo && (
                          <p className="text-xs text-gray-600 mt-1">
                            Important tasks that should be completed soon but are not urgent
                          </p>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center">
                      <div className="bg-blue-100 p-2 rounded-lg">
                        <SparklesIcon className="w-5 h-5 text-blue-700" />
                      </div>
                      <div className="ml-3">
                        <p className="font-medium text-gray-900">Low Priority</p>
                        {showPriorityInfo && (
                          <p className="text-xs text-gray-600 mt-1">
                            Tasks that are beneficial but can be postponed if necessary
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Next Task Card */}
              {personalizedRoutine.find(p => p.type === 'free' && p.suggestedTask) && (
                <div className="bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl shadow-md p-6 text-white">
                  <h3 className="font-bold text-lg mb-2 flex items-center">
                    <CheckCircleIcon className="w-5 h-5 mr-2" />
                    Focus Recommendation
                  </h3>
                  <p className="text-sm text-blue-100 mb-4">
                    Based on your goals and available time
                  </p>
                  
                  {(() => {
                    const nextTask = personalizedRoutine.find(p => p.type === 'free' && p.suggestedTask);
                    if (nextTask) {
                      return (
                        <div className="bg-white/10 backdrop-blur-md rounded-lg p-4">
                          <p className="font-bold text-lg">{nextTask.suggestedTask.title}</p>
                          <div className="flex items-center mt-2 mb-3">
                            <ClockIcon className="w-4 h-4 mr-1 text-blue-200" />
                            <span className="text-sm text-blue-100">{nextTask.suggestedTask.duration} minutes</span>
                          </div>
                          <button className="w-full bg-white text-blue-700 hover:bg-blue-50 transition-colors py-2 rounded-lg font-medium text-sm">
                            Start Focused Session
                          </button>
                        </div>
                      );
                    }
                    return null;
                  })()}
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-xl shadow-sm p-6">
            <DailyRoutine 
              daySchedule={timetableData[selectedDay] || []}
              studentGoals={[user?.longTermGoal]}
              interests={user?.interests || []}
            />
          </div>
        )}
      </div>
      
      {/* Add custom styles for scrollbar */}
      <style jsx global>{`
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
        .hide-scrollbar {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .animate-pulse {
          animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes pulse {
          0%, 100% {
            opacity: 1;
          }
          50% {
            opacity: .5;
          }
        }
        .scale-102 {
          transform: scale(1.02);
        }
      `}</style>
    </div>
  );
}